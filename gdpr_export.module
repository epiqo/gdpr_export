<?php

/**
 * @file
 * Code for the GDPR export module.
 */


use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Encoder\XmlEncoder;

/**
 * Implements hook_menu().
 */
function gdpr_export_menu() {
  $items['user/%user/gdpr_export'] = [
    'title' => 'User data export',
    'page callback' => 'gdpr_export_user_export',
    'page arguments' => [1],
    'access callback' => 'gdpr_export_user_export_access',
    'access arguments' => [1],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function gdpr_export_permission() {
  return [
    'bypass gdpr user export' => [
      'title' => t('Access any user export'),
      'description' => t('Allows users to access export data of any user.')
    ]
  ];
}

/**
 * Access callback for the user export path.
 */
function gdpr_export_user_export_access($account) {
  global $user;

  return user_access('bypass gdpr user export', $user)
    || $account->uid == $user->uid;
}

/**
 * Page callback to export a users data.
 *
 * @param object $account
 *   The account for which the user should be exported.
 */
function gdpr_export_user_export($account) {
  // Create a directory, where all export files which should be saved.
  // @todo: figure how to create a truly unique file dir.
  $directory = 'temporary://gdpr_export_' . $account->uid . '/' . REQUEST_TIME;
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $format = 'xml';
  // Allow modules to alter the format. Currently only xml and json are
  // supported.
  drupal_alter('gdpr_export_user_export_format', $format);

  $context = ['gdpr_export_dir' => $directory];
  drupal_alter('gdpr_export_user_export_context', $directory);

  // Invoke all hooks that export user data. They should do that by saving a new
  // file into the given gdpr_export_dir set in the $context and return the
  // resulting filename & path from as returned from file_unmanaged_save_data().
  $files = module_invoke_all('gdpr_export_user_export', $account, $format, $context);

  // Base name for the zip file and uncompressed folder.
  $zip_base = $account->uid . '_export';
  $filename = "$zip_base.zip";

  // @todo: check if this is a good path for the zip file.
  $zip_path = drupal_realpath("$directory/$filename");

  // Create the zip archive with all the files.
  $zip = new ZipArchive();
  $zip->open($zip_path, ZipArchive::CREATE);

  // Get the path to export directory.
  $real_dir = drupal_realpath($directory);

  // Get a list of all files in the export dir.
  $files = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($real_dir),
    RecursiveIteratorIterator::LEAVES_ONLY
  );

  foreach ($files as $name => $file)
  {
    // Skip directories (they will be added automatically)
    if (!$file->isDir())
    {
      // Get real and relative path for current file
      $filePath = $file->getRealPath();
      $relativePath = substr($filePath, strlen($real_dir) + 1);

      // Add current file to archive, keep the realtive path though, since they
      // are referenced in the export by the file normalizers.
      $zip->addFile($filePath, $relativePath);
    }
  }

  $zip->close();

  // Send it to the client. Taken from:
  // https://drupal.stackexchange.com/questions/33177/how-to-download-zip-file-through-browser
  // and @see file_transfer().
  if (ob_get_level()) {
    ob_end_clean();
  }

  // Most of this is only necessary because of IE
  drupal_add_http_header('Cache-Control', 'public, no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
  drupal_add_http_header('Content-Type',  'application/octet-stream');
  drupal_add_http_header('Content-Disposition', "attachment; filename=$filename;" );
  drupal_add_http_header('Content-Transfer-Encoding', 'binary');

  $fp = fopen($zip_path, 'rb');
  fpassthru($fp);
  fclose($fp);

  // Delete the directory, so that we don't have any dangling files with
  // personal information in the temp dir.
  file_unmanaged_delete_recursive($directory);
  drupal_exit();
}

/**
 * Returns a list of normalizers and their weight that can be used for the gdpr
 * export.
 */
function gdpr_export_retrieve_normalizers() {
  // Register all normalizers. The hooks should return an array, with the
  // normalizer classes as key and their weight as value. e.g.
  // ['GDPRExportSpecializedNormalizer' => -10]
  $normalizers = module_invoke_all('gdpr_export_normalizer_info');
  // Allow modules to the normalizer list.
  drupal_alter('gdpr_export_normalizer_info', $normalizers);

  return $normalizers;
}

/**
 * Retrieves and instantiates all normalizers in the correct order according to
 * their weight.
 */
function gdpr_export_init_normalizers() {
  $normalizer_classes = gdpr_export_retrieve_normalizers();
  asort($normalizer_classes);
  $normalizers = [];
  foreach ($normalizer_classes as $class => $weight) {
    $normalizers[] = new $class();
  }
  return $normalizers;
}

/**
 * Serializes the given entity.
 *
 * @param \EntityDrupalWrapper $entity
 *   The entity to export.
 * @param string $type
 *   Type of export, either 'json' or 'xml' (default).
 * @param array $context
 *   Options normalizers/encoders have access to.
 * @param string $xml_root_name
 *   An optional name for the root node. If not set, it will be set to the
 *   entities type name. Only applicable if $type is 'xml'.
 *
 * @return string
 *   The serialized entity in the selected format, by default xml.
 */
function gdpr_export_serialize_entity(EntityDrupalWrapper $entity, $type = 'xml', $context = [], $xml_root_name = NULL) {
  if (empty($xml_root_name)) {
    $xml_root_name = $entity->type();
  }

  $normalizers = gdpr_export_init_normalizers();
  $encoders = [new JsonEncoder(), new XmlEncoder($xml_root_name)];
  $serializer = new Serializer($normalizers, $encoders);

  return $serializer->serialize($entity, $type, $context);
}

/**
 * Implements hook_gdpr_export_user_export().
 */
function gdpr_export_gdpr_export_user_export($account, $format, $context) {
  // Export the basic user account data.
  $meta = entity_metadata_wrapper('user', $account);
  $data = gdpr_export_serialize_entity($meta, $format, $context);

  return file_unmanaged_save_data($data, $context['gdpr_export_dir'] . "/user.$format");
}

/**
 * Implements hook_gdpr_export_normalizer_info().
 */
function gdpr_export_gdpr_export_normalizer_info() {
  // Export the default normalizers.
  return [
    'GDPRExportAddressFieldNormalizer' => -10,
    'GDPRExportDateNormalizer' => -5,
    'GDPRExportTaxonomyTermNormalizer' => 0,
    'GDPRExportFileFieldNormalizer' => 0,
    'GDPRExportImageFieldNormalizer' => 0,
    'GDPRExportListNormalizer' => 0,
    'GDPRExportUserNormalizer' => 5,
    'GDPRExportFieldCollectionItemNormalizer' => 5,
    'GDPRExportGenericDataNormalizer' => 5,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gdpr_export_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // @todo: does it makes sense to place the export link in the edit form.
  global $user;
  $account_uid = $form['#user']->uid;

  if (user_access('bypass gdpr user export')
    || $account_uid == $user->uid
  ) {
    $form['actions']['gdpr_export_data'] = [
      '#type' => 'submit',
      '#value' => t('Export all data'),
      '#submit' => ['gdpr_export_user_data_submit'],
    ];
  }
}

function gdpr_export_user_data_submit(&$form, &$form_state) {
  drupal_goto('user/' . $form['#user']->uid . '/gdpr_export');
}
